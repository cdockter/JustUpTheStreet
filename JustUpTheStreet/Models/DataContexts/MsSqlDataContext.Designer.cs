//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DataContext", "ContributionAccount", "Contribution", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(JustUpTheStreet.Models.DataContexts.Contribution), "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Account))]
[assembly: EdmRelationshipAttribute("DataContext", "PrizeAccount", "Prize", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(JustUpTheStreet.Models.DataContexts.Prize), "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Account))]
[assembly: EdmRelationshipAttribute("DataContext", "PrizeStatePrize", "PrizeState", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.PrizeState), "Prize", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Prize))]
[assembly: EdmRelationshipAttribute("DataContext", "PrizeRequirement", "Prize", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Prize), "Requirement", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(JustUpTheStreet.Models.DataContexts.Requirement))]
[assembly: EdmRelationshipAttribute("DataContext", "AccountClaim", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Account), "Claim", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(JustUpTheStreet.Models.DataContexts.Claim), true)]
[assembly: EdmRelationshipAttribute("DataContext", "ClaimFulfillment", "Claim", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Claim), "Fulfillment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(JustUpTheStreet.Models.DataContexts.Fulfillment), true)]
[assembly: EdmRelationshipAttribute("DataContext", "RequirementFulfillment", "Requirement", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Requirement), "Fulfillment", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(JustUpTheStreet.Models.DataContexts.Fulfillment), true)]
[assembly: EdmRelationshipAttribute("DataContext", "aspnet_UsersAccount", "aspnet_Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(JustUpTheStreet.Models.DataContexts.aspnet_Users), "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(JustUpTheStreet.Models.DataContexts.Account))]

#endregion

namespace JustUpTheStreet.Models.DataContexts
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MsSqlDataContextContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MsSqlDataContextContainer object using the connection string found in the 'MsSqlDataContextContainer' section of the application configuration file.
        /// </summary>
        public MsSqlDataContextContainer() : base("name=MsSqlDataContextContainer", "MsSqlDataContextContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MsSqlDataContextContainer object.
        /// </summary>
        public MsSqlDataContextContainer(string connectionString) : base(connectionString, "MsSqlDataContextContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MsSqlDataContextContainer object.
        /// </summary>
        public MsSqlDataContextContainer(EntityConnection connection) : base(connection, "MsSqlDataContextContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Fulfillment> Fulfillments
        {
            get
            {
                if ((_Fulfillments == null))
                {
                    _Fulfillments = base.CreateObjectSet<Fulfillment>("Fulfillments");
                }
                return _Fulfillments;
            }
        }
        private ObjectSet<Fulfillment> _Fulfillments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Requirement> Requirements
        {
            get
            {
                if ((_Requirements == null))
                {
                    _Requirements = base.CreateObjectSet<Requirement>("Requirements");
                }
                return _Requirements;
            }
        }
        private ObjectSet<Requirement> _Requirements;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Contribution> Contributions
        {
            get
            {
                if ((_Contributions == null))
                {
                    _Contributions = base.CreateObjectSet<Contribution>("Contributions");
                }
                return _Contributions;
            }
        }
        private ObjectSet<Contribution> _Contributions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Accounts
        {
            get
            {
                if ((_Accounts == null))
                {
                    _Accounts = base.CreateObjectSet<Account>("Accounts");
                }
                return _Accounts;
            }
        }
        private ObjectSet<Account> _Accounts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PrizeState> PrizeStates
        {
            get
            {
                if ((_PrizeStates == null))
                {
                    _PrizeStates = base.CreateObjectSet<PrizeState>("PrizeStates");
                }
                return _PrizeStates;
            }
        }
        private ObjectSet<PrizeState> _PrizeStates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Prize> Prizes
        {
            get
            {
                if ((_Prizes == null))
                {
                    _Prizes = base.CreateObjectSet<Prize>("Prizes");
                }
                return _Prizes;
            }
        }
        private ObjectSet<Prize> _Prizes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Claim> Claims
        {
            get
            {
                if ((_Claims == null))
                {
                    _Claims = base.CreateObjectSet<Claim>("Claims");
                }
                return _Claims;
            }
        }
        private ObjectSet<Claim> _Claims;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<aspnet_Users> aspnet_Users
        {
            get
            {
                if ((_aspnet_Users == null))
                {
                    _aspnet_Users = base.CreateObjectSet<aspnet_Users>("aspnet_Users");
                }
                return _aspnet_Users;
            }
        }
        private ObjectSet<aspnet_Users> _aspnet_Users;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Fulfillments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFulfillments(Fulfillment fulfillment)
        {
            base.AddObject("Fulfillments", fulfillment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Requirements EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRequirements(Requirement requirement)
        {
            base.AddObject("Requirements", requirement);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Contributions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContributions(Contribution contribution)
        {
            base.AddObject("Contributions", contribution);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Accounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccounts(Account account)
        {
            base.AddObject("Accounts", account);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PrizeStates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPrizeStates(PrizeState prizeState)
        {
            base.AddObject("PrizeStates", prizeState);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Prizes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPrizes(Prize prize)
        {
            base.AddObject("Prizes", prize);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Claims EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClaims(Claim claim)
        {
            base.AddObject("Claims", claim);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the aspnet_Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToaspnet_Users(aspnet_Users aspnet_Users)
        {
            base.AddObject("aspnet_Users", aspnet_Users);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="accountName">Initial value of the AccountName property.</param>
        /// <param name="displayName">Initial value of the DisplayName property.</param>
        public static Account CreateAccount(global::System.Int64 id, global::System.String accountName, global::System.String displayName)
        {
            Account account = new Account();
            account.Id = id;
            account.AccountName = accountName;
            account.DisplayName = displayName;
            return account;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AccountName
        {
            get
            {
                return _AccountName;
            }
            set
            {
                OnAccountNameChanging(value);
                ReportPropertyChanging("AccountName");
                _AccountName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AccountName");
                OnAccountNameChanged();
            }
        }
        private global::System.String _AccountName;
        partial void OnAccountNameChanging(global::System.String value);
        partial void OnAccountNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                OnDisplayNameChanging(value);
                ReportPropertyChanging("DisplayName");
                _DisplayName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("DisplayName");
                OnDisplayNameChanged();
            }
        }
        private global::System.String _DisplayName;
        partial void OnDisplayNameChanging(global::System.String value);
        partial void OnDisplayNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.Int16 _State = 1;
        partial void OnStateChanging(global::System.Int16 value);
        partial void OnStateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "ContributionAccount", "Contribution")]
        public EntityCollection<Contribution> Contributions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Contribution>("DataContext.ContributionAccount", "Contribution");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Contribution>("DataContext.ContributionAccount", "Contribution", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "PrizeAccount", "Prize")]
        public EntityCollection<Prize> Prizes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Prize>("DataContext.PrizeAccount", "Prize");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Prize>("DataContext.PrizeAccount", "Prize", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "AccountClaim", "Claim")]
        public EntityCollection<Claim> Claims
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Claim>("DataContext.AccountClaim", "Claim");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Claim>("DataContext.AccountClaim", "Claim", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "aspnet_UsersAccount", "aspnet_Users")]
        public aspnet_Users aspnet_Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("DataContext.aspnet_UsersAccount", "aspnet_Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("DataContext.aspnet_UsersAccount", "aspnet_Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<aspnet_Users> aspnet_UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<aspnet_Users>("DataContext.aspnet_UsersAccount", "aspnet_Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<aspnet_Users>("DataContext.aspnet_UsersAccount", "aspnet_Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="aspnet_Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class aspnet_Users : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new aspnet_Users object.
        /// </summary>
        /// <param name="applicationId">Initial value of the ApplicationId property.</param>
        /// <param name="userId">Initial value of the UserId property.</param>
        /// <param name="userName">Initial value of the UserName property.</param>
        /// <param name="loweredUserName">Initial value of the LoweredUserName property.</param>
        /// <param name="isAnonymous">Initial value of the IsAnonymous property.</param>
        /// <param name="lastActivityDate">Initial value of the LastActivityDate property.</param>
        public static aspnet_Users Createaspnet_Users(global::System.Guid applicationId, global::System.Guid userId, global::System.String userName, global::System.String loweredUserName, global::System.Boolean isAnonymous, global::System.DateTime lastActivityDate)
        {
            aspnet_Users aspnet_Users = new aspnet_Users();
            aspnet_Users.ApplicationId = applicationId;
            aspnet_Users.UserId = userId;
            aspnet_Users.UserName = userName;
            aspnet_Users.LoweredUserName = loweredUserName;
            aspnet_Users.IsAnonymous = isAnonymous;
            aspnet_Users.LastActivityDate = lastActivityDate;
            return aspnet_Users;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ApplicationId
        {
            get
            {
                return _ApplicationId;
            }
            set
            {
                OnApplicationIdChanging(value);
                ReportPropertyChanging("ApplicationId");
                _ApplicationId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ApplicationId");
                OnApplicationIdChanged();
            }
        }
        private global::System.Guid _ApplicationId;
        partial void OnApplicationIdChanging(global::System.Guid value);
        partial void OnApplicationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Guid _UserId;
        partial void OnUserIdChanging(global::System.Guid value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UserName
        {
            get
            {
                return _UserName;
            }
            set
            {
                OnUserNameChanging(value);
                ReportPropertyChanging("UserName");
                _UserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UserName");
                OnUserNameChanged();
            }
        }
        private global::System.String _UserName;
        partial void OnUserNameChanging(global::System.String value);
        partial void OnUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LoweredUserName
        {
            get
            {
                return _LoweredUserName;
            }
            set
            {
                OnLoweredUserNameChanging(value);
                ReportPropertyChanging("LoweredUserName");
                _LoweredUserName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LoweredUserName");
                OnLoweredUserNameChanged();
            }
        }
        private global::System.String _LoweredUserName;
        partial void OnLoweredUserNameChanging(global::System.String value);
        partial void OnLoweredUserNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MobileAlias
        {
            get
            {
                return _MobileAlias;
            }
            set
            {
                OnMobileAliasChanging(value);
                ReportPropertyChanging("MobileAlias");
                _MobileAlias = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MobileAlias");
                OnMobileAliasChanged();
            }
        }
        private global::System.String _MobileAlias;
        partial void OnMobileAliasChanging(global::System.String value);
        partial void OnMobileAliasChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsAnonymous
        {
            get
            {
                return _IsAnonymous;
            }
            set
            {
                OnIsAnonymousChanging(value);
                ReportPropertyChanging("IsAnonymous");
                _IsAnonymous = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAnonymous");
                OnIsAnonymousChanged();
            }
        }
        private global::System.Boolean _IsAnonymous;
        partial void OnIsAnonymousChanging(global::System.Boolean value);
        partial void OnIsAnonymousChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastActivityDate
        {
            get
            {
                return _LastActivityDate;
            }
            set
            {
                OnLastActivityDateChanging(value);
                ReportPropertyChanging("LastActivityDate");
                _LastActivityDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastActivityDate");
                OnLastActivityDateChanged();
            }
        }
        private global::System.DateTime _LastActivityDate;
        partial void OnLastActivityDateChanging(global::System.DateTime value);
        partial void OnLastActivityDateChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="Claim")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Claim : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Claim object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="accountId">Initial value of the AccountId property.</param>
        public static Claim CreateClaim(global::System.Int64 id, global::System.Int64 accountId)
        {
            Claim claim = new Claim();
            claim.Id = id;
            claim.AccountId = accountId;
            return claim;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 AccountId
        {
            get
            {
                return _AccountId;
            }
            set
            {
                OnAccountIdChanging(value);
                ReportPropertyChanging("AccountId");
                _AccountId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountId");
                OnAccountIdChanged();
            }
        }
        private global::System.Int64 _AccountId;
        partial void OnAccountIdChanging(global::System.Int64 value);
        partial void OnAccountIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "AccountClaim", "Account")]
        public Account Claimer
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.AccountClaim", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.AccountClaim", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> ClaimerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.AccountClaim", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DataContext.AccountClaim", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "ClaimFulfillment", "Fulfillment")]
        public EntityCollection<Fulfillment> Fulfillments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Fulfillment>("DataContext.ClaimFulfillment", "Fulfillment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Fulfillment>("DataContext.ClaimFulfillment", "Fulfillment", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="Contribution")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Contribution : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Contribution object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="amount">Initial value of the Amount property.</param>
        /// <param name="expirationDate">Initial value of the ExpirationDate property.</param>
        public static Contribution CreateContribution(global::System.Int64 id, global::System.Double amount, global::System.DateTime expirationDate)
        {
            Contribution contribution = new Contribution();
            contribution.Id = id;
            contribution.Amount = amount;
            contribution.ExpirationDate = expirationDate;
            return contribution;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private global::System.Double _Amount;
        partial void OnAmountChanging(global::System.Double value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ExpirationDate
        {
            get
            {
                return _ExpirationDate;
            }
            set
            {
                OnExpirationDateChanging(value);
                ReportPropertyChanging("ExpirationDate");
                _ExpirationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExpirationDate");
                OnExpirationDateChanged();
            }
        }
        private global::System.DateTime _ExpirationDate;
        partial void OnExpirationDateChanging(global::System.DateTime value);
        partial void OnExpirationDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "ContributionAccount", "Account")]
        public Account Contributor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.ContributionAccount", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.ContributionAccount", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> ContributorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.ContributionAccount", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DataContext.ContributionAccount", "Account", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="Fulfillment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Fulfillment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Fulfillment object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="requirementId">Initial value of the RequirementId property.</param>
        /// <param name="claimId">Initial value of the ClaimId property.</param>
        public static Fulfillment CreateFulfillment(global::System.Int64 id, global::System.String description, global::System.Int64 requirementId, global::System.Int64 claimId)
        {
            Fulfillment fulfillment = new Fulfillment();
            fulfillment.Id = id;
            fulfillment.Description = description;
            fulfillment.RequirementId = requirementId;
            fulfillment.ClaimId = claimId;
            return fulfillment;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RequirementId
        {
            get
            {
                return _RequirementId;
            }
            set
            {
                OnRequirementIdChanging(value);
                ReportPropertyChanging("RequirementId");
                _RequirementId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RequirementId");
                OnRequirementIdChanged();
            }
        }
        private global::System.Int64 _RequirementId;
        partial void OnRequirementIdChanging(global::System.Int64 value);
        partial void OnRequirementIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ClaimId
        {
            get
            {
                return _ClaimId;
            }
            set
            {
                OnClaimIdChanging(value);
                ReportPropertyChanging("ClaimId");
                _ClaimId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClaimId");
                OnClaimIdChanged();
            }
        }
        private global::System.Int64 _ClaimId;
        partial void OnClaimIdChanging(global::System.Int64 value);
        partial void OnClaimIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "ClaimFulfillment", "Claim")]
        public Claim Claim
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Claim>("DataContext.ClaimFulfillment", "Claim").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Claim>("DataContext.ClaimFulfillment", "Claim").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Claim> ClaimReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Claim>("DataContext.ClaimFulfillment", "Claim");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Claim>("DataContext.ClaimFulfillment", "Claim", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "RequirementFulfillment", "Requirement")]
        public Requirement Requirement
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Requirement>("DataContext.RequirementFulfillment", "Requirement").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Requirement>("DataContext.RequirementFulfillment", "Requirement").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Requirement> RequirementReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Requirement>("DataContext.RequirementFulfillment", "Requirement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Requirement>("DataContext.RequirementFulfillment", "Requirement", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="Prize")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Prize : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Prize object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Prize CreatePrize(global::System.Int32 id, global::System.String description, global::System.String name)
        {
            Prize prize = new Prize();
            prize.Id = id;
            prize.Description = description;
            prize.Name = name;
            return prize;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "PrizeAccount", "Account")]
        public Account Owner
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.PrizeAccount", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.PrizeAccount", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> OwnerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DataContext.PrizeAccount", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DataContext.PrizeAccount", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "PrizeStatePrize", "PrizeState")]
        public PrizeState State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PrizeState>("DataContext.PrizeStatePrize", "PrizeState").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PrizeState>("DataContext.PrizeStatePrize", "PrizeState").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<PrizeState> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<PrizeState>("DataContext.PrizeStatePrize", "PrizeState");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<PrizeState>("DataContext.PrizeStatePrize", "PrizeState", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "PrizeRequirement", "Requirement")]
        public EntityCollection<Requirement> Requirements
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Requirement>("DataContext.PrizeRequirement", "Requirement");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Requirement>("DataContext.PrizeRequirement", "Requirement", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="PrizeState")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PrizeState : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PrizeState object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="state">Initial value of the State property.</param>
        /// <param name="expirationDate">Initial value of the ExpirationDate property.</param>
        public static PrizeState CreatePrizeState(global::System.Int64 id, global::System.Int16 state, global::System.DateTime expirationDate)
        {
            PrizeState prizeState = new PrizeState();
            prizeState.Id = id;
            prizeState.State = state;
            prizeState.ExpirationDate = expirationDate;
            return prizeState;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int16 State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.Int16 _State;
        partial void OnStateChanging(global::System.Int16 value);
        partial void OnStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ExpirationDate
        {
            get
            {
                return _ExpirationDate;
            }
            set
            {
                OnExpirationDateChanging(value);
                ReportPropertyChanging("ExpirationDate");
                _ExpirationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ExpirationDate");
                OnExpirationDateChanged();
            }
        }
        private global::System.DateTime _ExpirationDate;
        partial void OnExpirationDateChanging(global::System.DateTime value);
        partial void OnExpirationDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "PrizeStatePrize", "Prize")]
        public Prize Prize
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Prize>("DataContext.PrizeStatePrize", "Prize").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Prize>("DataContext.PrizeStatePrize", "Prize").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Prize> PrizeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Prize>("DataContext.PrizeStatePrize", "Prize");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Prize>("DataContext.PrizeStatePrize", "Prize", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DataContext", Name="Requirement")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Requirement : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Requirement object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="prizeId">Initial value of the PrizeId property.</param>
        public static Requirement CreateRequirement(global::System.Int64 id, global::System.String description, global::System.Int32 prizeId)
        {
            Requirement requirement = new Requirement();
            requirement.Id = id;
            requirement.Description = description;
            requirement.PrizeId = prizeId;
            return requirement;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PrizeId
        {
            get
            {
                return _PrizeId;
            }
            set
            {
                OnPrizeIdChanging(value);
                ReportPropertyChanging("PrizeId");
                _PrizeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PrizeId");
                OnPrizeIdChanged();
            }
        }
        private global::System.Int32 _PrizeId;
        partial void OnPrizeIdChanging(global::System.Int32 value);
        partial void OnPrizeIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "PrizeRequirement", "Prize")]
        public Prize Prize
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Prize>("DataContext.PrizeRequirement", "Prize").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Prize>("DataContext.PrizeRequirement", "Prize").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Prize> PrizeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Prize>("DataContext.PrizeRequirement", "Prize");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Prize>("DataContext.PrizeRequirement", "Prize", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DataContext", "RequirementFulfillment", "Fulfillment")]
        public EntityCollection<Fulfillment> SubmittedFulfillments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Fulfillment>("DataContext.RequirementFulfillment", "Fulfillment");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Fulfillment>("DataContext.RequirementFulfillment", "Fulfillment", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
